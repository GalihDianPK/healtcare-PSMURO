#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "MAX30105.h"
#include "heartRate.h"
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ThingSpeak.h>

//== sensor ds 
#define ONE_WIRE_BUS D7
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
// === Objek sensor dan LCD ===
MAX30105 particleSensor;
LiquidCrystal_I2C lcd(0x27, 16, 2);

// === Variabel BPM ===
const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;
float beatsPerMinute;
int beatAvg;

// === Konfigurasi WiFi & ThingSpeak ===
const char* ssid = "UGMURO-INET";           // WiFi SSID
const char* password = "Gepuk15000";        // Password WiFi
const unsigned long channelID = 3131836;    // Channel ID
const char* writeAPIKey = "72K164IWJNP9TRUU"; // Write API Key

WiFiClient client;
unsigned long lastThingSpeakUpdate = 0;
const unsigned long thingSpeakInterval = 15000; // kirim tiap 15 detik

void setup() {
  Serial.begin(115200);
  Serial.println("Initializing...");

  lcd.init();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("MCU HEALTHCARE");
  lcd.setCursor(0, 1);
  lcd.print("Connecting WiFi");
  
  // === Koneksi WiFi ===
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  lcd.clear();
  lcd.print("WiFi Connected!");
  delay(1500);
  lcd.clear();

  ThingSpeak.begin(client);
  sensors.begin();

  // === Inisialisasi sensor MAX30102 ===
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX30102 not found. Check wiring.");
    lcd.print("Sensor Error!");
    while (1);
  }

  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x0A);
  particleSensor.setPulseAmplitudeGreen(0);

  lcd.clear();
  lcd.print("Ready Sensor...");
  delay(1000);
  lcd.clear();
}

void loop() {
  sensors.requestTemperatures();
  float tempC =
  sensors.getTempCByIndex(0);
  long irValue = particleSensor.getIR();

  // === Hitung BPM ===
  if (checkForBeat(irValue)) {
    long delta = millis() - lastBeat;
    lastBeat = millis();
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20) {
      rates[rateSpot++] = (byte)beatsPerMinute;
      rateSpot %= RATE_SIZE;

      beatAvg = 0;
      for (byte x = 0; x < RATE_SIZE; x++) beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
    }
  }

  // === Tampilkan di Serial ===
  Serial.print("IR=");
  Serial.print(irValue);
  Serial.print(", BPM=");
  Serial.print(beatsPerMinute);
  Serial.print(", Avg BPM=");
  Serial.println(beatAvg);

  // === Tampilkan di LCD ===
  if (irValue < 50000) {
    lcd.setCursor(0, 0);
    lcd.print("No Finger ?    ");
    lcd.setCursor(0, 1);
    lcd.print("Letakan Jari!  ");
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("BPM: ");
    lcd.print(beatsPerMinute, 0);
    lcd.setCursor(0, 1);
    lcd.print("Avg: ");
    lcd.print(beatAvg);
  }

  // === Kirim data ke ThingSpeak setiap 15 detik ===
  if (millis() - lastThingSpeakUpdate >= thingSpeakInterval) {
    ThingSpeak.setField(1, irValue);
    ThingSpeak.setField(2, beatsPerMinute);
    ThingSpeak.setField(3, beatAvg);
    ThingSpeak.setField(4, tempC);

    int x = ThingSpeak.writeFields(channelID, writeAPIKey);

    if (x == 200) {
      Serial.println("ThingSpeak update successful!");
    } else {
      Serial.println("Update failed. HTTP error code: " + String(x));
    }

    lastThingSpeakUpdate = millis();
  }
}
